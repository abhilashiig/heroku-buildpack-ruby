#!/usr/bin/env ruby

# This script compiles an application so it can run on Heroku.
# It will install the application's specified version of Ruby, it's dependencies
# and certain framework specific requirements (such as calling `rake assets:precompile`
# for rails apps). You can see all features described in the devcenter
# https://devcenter.heroku.com/articles/ruby-support
$stdout.sync = true

# Ensure RubyGems is properly loaded
begin
  require 'rubygems'
rescue LoadError => e
  # If we can't load rubygems directly, try to find it manually
  rubygems_paths = [
    File.join(ENV['RUBYLIB'].to_s.split(':').first.to_s, 'rubygems.rb'),
    File.join(RbConfig::CONFIG['rubylibdir'].to_s, 'rubygems.rb'),
    File.join(RbConfig::CONFIG['rubylibdir'].to_s, '..', 'rubygems.rb')
  ]
  
  rubygems_path = rubygems_paths.find { |path| File.exist?(path) }
  if rubygems_path
    puts "Loading RubyGems from #{rubygems_path}"
    require rubygems_path
  else
    puts "WARNING: Could not load RubyGems. Creating minimal implementation."
    # Define minimal Gem module to allow script to continue
    module Gem
      VERSION = "3.0.3"
      
      class LoadError < ::LoadError; end
      
      def self.path
        @gem_path ||= [ENV['GEM_HOME']].compact
      end
      
      def self.paths
        @gem_paths ||= {}
        @gem_paths[:path] ||= path
        @gem_paths
      end
    end
  end
end

$:.unshift File.expand_path("../../../lib", __FILE__)
require "language_pack"
require "language_pack/shell_helpers"
HerokuBuildReport.set_global(
  # Coupled with `bin/report`
  path: Pathname(ARGV[1])
        .join(".heroku")
        .join("ruby")
        .join("build_report.yml")
).tap(&:clear!)

begin
  app_path = Pathname(ARGV[0])
  cache_path = Pathname(ARGV[1])
  gemfile_lock = LanguagePack.gemfile_lock(app_path: app_path)
  Dir.chdir(app_path)

  LanguagePack::ShellHelpers.initialize_env(ARGV[2])
  if pack = LanguagePack.detect(
    app_path: app_path,
    cache_path: cache_path,
    gemfile_lock: gemfile_lock
  )
    pack.topic("Compiling #{pack.name}")
    pack.compile
  end
rescue Exception => e
  LanguagePack::ShellHelpers.display_error_and_exit(e)
end
