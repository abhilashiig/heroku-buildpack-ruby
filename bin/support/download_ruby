#!/usr/bin/env bash

# Print system information
echo "System Information:"
echo "------------------"
echo "OS: $(uname -a)"
echo "Architecture: $(uname -m)"
echo "Kernel: $(uname -r)"
echo "------------------"

# Downloads a bootstrap copy of Ruby for execution of the buildpack
# this is needed so we can totally control the Ruby version and are
# not dependant on the Ruby version of the stack image

# fail hard
set -o pipefail
# fail harder
set -eu

BIN_DIR=$1
RUBY_BOOTSTRAP_DIR=$2

# Stack is set by codon, listed here so shellcheck knows about it
STACK=${STACK:-}

curl_retry_on_18() {
  local ec=18;
  local attempts=0;
  while (( ec == 18 && attempts++ < 3 )); do
    curl "$@" # -C - would return code 33 if unsupported by server
    ec=$?
  done
  return $ec
}

ruby_url() {
  local stack=$1
  local version=$2

  echo "https://echologhq.com/heroku/ruby-2.6.6.tgz"
}

# Pull ruby version out of buildpack.toml to be used with bootstrapping
regex=".*ruby_version = [\'\"]([0-9]+\.[0-9]+\.[0-9]+)[\'\"].*"
if [[ $(cat "$BIN_DIR/../buildpack.toml") =~ $regex ]]
  then
    heroku_buildpack_ruby_url=$(ruby_url "$STACK" "${BASH_REMATCH[1]}")
  else
    heroku_buildpack_ruby_url=""
    echo "Could not detect ruby version to bootstrap"
    exit 1
fi

mkdir -p "$RUBY_BOOTSTRAP_DIR"

echo "Downloading Ruby from: $heroku_buildpack_ruby_url"
curl_retry_on_18 --fail --retry 3 --retry-connrefused --connect-timeout "${CURL_CONNECT_TIMEOUT:-3}" --silent --location -o "$RUBY_BOOTSTRAP_DIR/ruby.tgz" "$heroku_buildpack_ruby_url" || {
cat<<EOF
  Failed to download a Ruby executable for bootstrapping!

  This is most likely a temporary internal error. If the problem
  persists, make sure that you are not running a custom or forked
  version of the Heroku Ruby buildpack which may need updating.

  url: $heroku_buildpack_ruby_url
EOF
  exit 1
}

echo "Download complete. File size: $(ls -l "$RUBY_BOOTSTRAP_DIR/ruby.tgz" | awk '{print $5}') bytes"
echo "Extracting Ruby to: $RUBY_BOOTSTRAP_DIR"
tar xzf "$RUBY_BOOTSTRAP_DIR/ruby.tgz" -C "$RUBY_BOOTSTRAP_DIR"
echo "Moving Ruby files to correct location"
if [ -d "$RUBY_BOOTSTRAP_DIR/ruby-2.6.6" ]; then
  # First, ensure we have write permissions
  chmod -R u+w "$RUBY_BOOTSTRAP_DIR"
  
  # Move all files including hidden ones
  cp -a "$RUBY_BOOTSTRAP_DIR/ruby-2.6.6"/. "$RUBY_BOOTSTRAP_DIR/"
  
  # Remove the source directory
  rm -rf "$RUBY_BOOTSTRAP_DIR/ruby-2.6.6"
  
  # Ensure bin directory exists and has correct permissions
  mkdir -p "$RUBY_BOOTSTRAP_DIR/bin"
  chmod -R u+x "$RUBY_BOOTSTRAP_DIR/bin"
  
  # Set up library path
  export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:-}:$RUBY_BOOTSTRAP_DIR/lib"
  
  # Verify Ruby binary
  if [ -f "$RUBY_BOOTSTRAP_DIR/bin/ruby" ]; then
    echo "Ruby binary found. Setting permissions..."
    chmod 755 "$RUBY_BOOTSTRAP_DIR/bin/ruby"
    echo "Verifying Ruby binary..."
    file "$RUBY_BOOTSTRAP_DIR/bin/ruby"
    echo "Testing Ruby binary..."
    LD_LIBRARY_PATH="$RUBY_BOOTSTRAP_DIR/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}" "$RUBY_BOOTSTRAP_DIR/bin/ruby" -v || echo "Ruby binary test failed"
  else
    echo "ERROR: Ruby binary not found in expected location"
    exit 1
  fi
fi

echo "Extraction complete. Contents of $RUBY_BOOTSTRAP_DIR:"
ls -la "$RUBY_BOOTSTRAP_DIR"
echo "Contents of bin directory:"
ls -la "$RUBY_BOOTSTRAP_DIR/bin" || true
echo "Contents of lib directory:"
ls -la "$RUBY_BOOTSTRAP_DIR/lib" || true
