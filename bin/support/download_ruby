#!/usr/bin/env bash

# Function to echo to stderr
log() {
  echo "$@" >&2
}

# Print system information
{
  log "System Information:"
  log "------------------"
  log "OS: $(uname -a)"
  log "Architecture: $(uname -m)"
  log "Kernel: $(uname -r)"
  if [ -f /etc/os-release ]; then
    log "Ubuntu Version: $(grep VERSION_ID /etc/os-release | cut -d'"' -f2)"
    log "Distribution: $(grep PRETTY_NAME /etc/os-release | cut -d'"' -f2)"
  fi
  log "------------------"
}

# Downloads a bootstrap copy of Ruby for execution of the buildpack
# this is needed so we can totally control the Ruby version and are
# not dependant on the Ruby version of the stack image

# fail hard
set -o pipefail
# fail harder
set -eu

BIN_DIR=$1
RUBY_BOOTSTRAP_DIR=$2

# Stack is set by codon, listed here so shellcheck knows about it
STACK=${STACK:-}

curl_retry_on_18() {
  local ec=18;
  local attempts=0;
  while (( ec == 18 && attempts++ < 3 )); do
    curl "$@" # -C - would return code 33 if unsupported by server
    ec=$?
  done
  return $ec
}

ruby_url() {
  local stack=$1
  local version=$2

  echo "https://echologhq.com/heroku/ruby-2.6.6.tgz"
}

# Pull ruby version out of buildpack.toml to be used with bootstrapping
regex=".*ruby_version = [\'\"]([0-9]+\.[0-9]+\.[0-9]+)[\'\"].*"
if [[ $(cat "$BIN_DIR/../buildpack.toml") =~ $regex ]]
  then
    heroku_buildpack_ruby_url=$(ruby_url "$STACK" "${BASH_REMATCH[1]}")
  else
    heroku_buildpack_ruby_url=""
    echo "Could not detect ruby version to bootstrap"
    exit 1
fi

mkdir -p "$RUBY_BOOTSTRAP_DIR"

log "Downloading Ruby from: $heroku_buildpack_ruby_url"
curl_retry_on_18 --fail --retry 3 --retry-connrefused --connect-timeout "${CURL_CONNECT_TIMEOUT:-3}" --silent --location -o "$RUBY_BOOTSTRAP_DIR/ruby.tgz" "$heroku_buildpack_ruby_url" || {
cat<<EOF
  Failed to download a Ruby executable for bootstrapping!

  This is most likely a temporary internal error. If the problem
  persists, make sure that you are not running a custom or forked
  version of the Heroku Ruby buildpack which may need updating.

  url: $heroku_buildpack_ruby_url
EOF
  exit 1
}

log "Download complete. File size: $(ls -l "$RUBY_BOOTSTRAP_DIR/ruby.tgz" | awk '{print $5}') bytes"
log "Extracting Ruby to: $RUBY_BOOTSTRAP_DIR"
tar xzf "$RUBY_BOOTSTRAP_DIR/ruby.tgz" -C "$RUBY_BOOTSTRAP_DIR"
log "Moving Ruby files to correct location"
# First, ensure we have write permissions
chmod -R u+w "$RUBY_BOOTSTRAP_DIR"

# Check if the tarball extracted with a ruby-2.6.6 directory structure
if [ -d "$RUBY_BOOTSTRAP_DIR/ruby-2.6.6" ]; then
  log "Found ruby-2.6.6 directory structure, moving files..."
  # Move all files including hidden ones
  cp -a "$RUBY_BOOTSTRAP_DIR/ruby-2.6.6"/. "$RUBY_BOOTSTRAP_DIR/"
  
  # Remove the source directory
  rm -rf "$RUBY_BOOTSTRAP_DIR/ruby-2.6.6"
elif [ -d "$RUBY_BOOTSTRAP_DIR/bin" ] && [ -f "$RUBY_BOOTSTRAP_DIR/bin/ruby" ]; then
  log "Ruby files already in correct location"
else
  log "Searching for Ruby binary in extracted contents..."
  # Try to find ruby binary in the extracted contents
  RUBY_BIN=$(find "$RUBY_BOOTSTRAP_DIR" -name ruby -type f -executable | head -1)
  
  if [ -n "$RUBY_BIN" ]; then
    log "Found Ruby binary at: $RUBY_BIN"
    # Get the directory containing the ruby binary
    RUBY_BIN_DIR=$(dirname "$RUBY_BIN")
    RUBY_ROOT_DIR=$(dirname "$RUBY_BIN_DIR")
    
    if [ "$RUBY_ROOT_DIR" != "$RUBY_BOOTSTRAP_DIR" ]; then
      log "Moving Ruby files from $RUBY_ROOT_DIR to $RUBY_BOOTSTRAP_DIR"
      cp -a "$RUBY_ROOT_DIR"/. "$RUBY_BOOTSTRAP_DIR/"
      rm -rf "$RUBY_ROOT_DIR"
    fi
  else
    log "ERROR: Could not find Ruby binary in extracted contents"
    log "Extracted contents structure:"
    find "$RUBY_BOOTSTRAP_DIR" -type f | sort >&2
    exit 1
  fi
fi

# Ensure bin directory exists and has correct permissions
mkdir -p "$RUBY_BOOTSTRAP_DIR/bin"
chmod -R u+x "$RUBY_BOOTSTRAP_DIR/bin"

# Set up library path
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:-}:$RUBY_BOOTSTRAP_DIR/lib"

# Verify Ruby binary
if [ -f "$RUBY_BOOTSTRAP_DIR/bin/ruby" ]; then
  log "Ruby binary found. Setting permissions..."
  chmod 755 "$RUBY_BOOTSTRAP_DIR/bin/ruby"
  log "Verifying Ruby binary..."
  file "$RUBY_BOOTSTRAP_DIR/bin/ruby" >&2
  log "Testing Ruby binary..."
  LD_LIBRARY_PATH="$RUBY_BOOTSTRAP_DIR/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}" "$RUBY_BOOTSTRAP_DIR/bin/ruby" -v >&2 || {
    log "Ruby binary test failed. This could be due to missing dependencies or incompatible binary."
    log "Checking shared library dependencies:"
    ldd "$RUBY_BOOTSTRAP_DIR/bin/ruby" >&2 || log "ldd command not available"
    exit 1
  }
else
  log "ERROR: Ruby binary not found at expected location: $RUBY_BOOTSTRAP_DIR/bin/ruby"
  log "Contents of $RUBY_BOOTSTRAP_DIR:"
  find "$RUBY_BOOTSTRAP_DIR" -type f -name "ruby" | sort >&2
  exit 1
fi

log "Extraction complete. Contents of $RUBY_BOOTSTRAP_DIR:"
ls -la "$RUBY_BOOTSTRAP_DIR" >&2
log "Contents of bin directory:"
ls -la "$RUBY_BOOTSTRAP_DIR/bin" >&2 || true
log "Contents of lib directory:"
ls -la "$RUBY_BOOTSTRAP_DIR/lib" >&2 || true

# Verify RubyGems files are present
log "Verifying RubyGems installation:"
if [ -d "$RUBY_BOOTSTRAP_DIR/lib/ruby" ]; then
  log "Ruby lib directory found"
  find "$RUBY_BOOTSTRAP_DIR/lib/ruby" -name "rubygems*" -o -name "gems" | sort >&2
  
  # Create necessary directories if they don't exist
  mkdir -p "$RUBY_BOOTSTRAP_DIR/lib/ruby/2.6.0"
  mkdir -p "$RUBY_BOOTSTRAP_DIR/lib/ruby/site_ruby/2.6.0"
  mkdir -p "$RUBY_BOOTSTRAP_DIR/lib/ruby/vendor_ruby/2.6.0"
  mkdir -p "$RUBY_BOOTSTRAP_DIR/lib/ruby/gems/2.6.0"
  
  # If rubygems.rb is missing, create a minimal version
  if [ ! -f "$RUBY_BOOTSTRAP_DIR/lib/ruby/2.6.0/rubygems.rb" ]; then
    log "Creating minimal rubygems.rb file"
    cat > "$RUBY_BOOTSTRAP_DIR/lib/ruby/2.6.0/rubygems.rb" << 'EOF'
# Minimal RubyGems stub to allow Ruby to start
module Gem
  def self.path
    @gem_path ||= []
  end
  
  def self.path=(paths)
    @gem_path = Array(paths)
  end
end
EOF
  fi
else
  log "WARNING: Ruby lib directory not found. RubyGems may not work correctly."
fi
