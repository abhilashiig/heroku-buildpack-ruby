#!/usr/bin/env bash
# The actual compilation code lives in `bin/support/ruby_compile`. This file instead
# bootstraps the ruby needed and then executes `bin/support/ruby_compile`

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BIN_DIR=$(cd "$(dirname "$0")" || exit; pwd) # absolute path
BUILDPACK_DIR=$(dirname "$BIN_DIR")

# shellcheck source=bin/support/bash_functions.sh
source "$BIN_DIR/support/bash_functions.sh"

# Get the bootstrap Ruby directory
bootstrap_ruby_dir=$(install_bootstrap_ruby "$BIN_DIR" "$BUILDPACK_DIR")

# Set up environment variables
export PATH="$bootstrap_ruby_dir/bin:$PATH"
export LD_LIBRARY_PATH="$bootstrap_ruby_dir/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"

# Set up RubyGems environment
export GEM_HOME="$bootstrap_ruby_dir/lib/ruby/gems/2.6.0"

# Ensure RubyGems is properly loaded by setting the correct RUBYLIB paths
# Include both the standard Ruby library paths and the site_ruby paths
export RUBYLIB="$bootstrap_ruby_dir/lib:$bootstrap_ruby_dir/lib/ruby/2.6.0:$bootstrap_ruby_dir/lib/ruby/2.6.0/x86_64-linux:$bootstrap_ruby_dir/lib/ruby/site_ruby/2.6.0:$bootstrap_ruby_dir/lib/ruby/vendor_ruby/2.6.0"
unset GEM_PATH

# Create a minimal rubygems.rb file if it doesn't exist
if [ ! -f "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb" ] && [ -d "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems" ]; then
  echo "Creating minimal rubygems.rb file..."
  cat > "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb" << 'EOL'
# Minimal rubygems.rb to bootstrap the loading process
module Gem
  VERSION = "3.0.3"
  
  class LoadError < ::LoadError
  end
  
  def self.path
    @gem_path ||= nil
    @gem_path ||= nil unless defined? @gem_path
    @gem_path ||= [ENV['GEM_HOME']].compact
  end
  
  def self.paths
    @gem_paths ||= {}
    @gem_paths ||= {} unless defined? @gem_paths
    @gem_paths[:path] ||= path
    @gem_paths
  end
  
  def self.ruby
    @ruby ||= File.join(RbConfig::CONFIG['bindir'],
                        RbConfig::CONFIG['ruby_install_name'])
    @ruby << RbConfig::CONFIG['EXEEXT']
  end
end

# Load the actual RubyGems code
require 'rubygems/defaults'
require 'rubygems/core_ext/kernel_gem'
require 'rubygems/core_ext/kernel_require'
EOL
fi

# Handle shared library dependencies
shared_lib_dir=$(setup_ruby_shared_libraries "$bootstrap_ruby_dir")

# Add the shared lib directory to LD_LIBRARY_PATH
# Make sure shared_lib_dir is at the beginning of the path for priority
export LD_LIBRARY_PATH="$shared_lib_dir:$bootstrap_ruby_dir/lib:$LD_LIBRARY_PATH"

# Print the LD_LIBRARY_PATH for debugging
echo "Updated LD_LIBRARY_PATH: $LD_LIBRARY_PATH"

# Verify that the required shared libraries are accessible
echo "Checking for critical shared libraries:"
for lib in libcrypto.so.1.0.0 libssl.so.1.0.0 libreadline.so.6; do
  if [ -f "$shared_lib_dir/$lib" ]; then
    echo "âœ“ $lib is available at $shared_lib_dir/$lib"
    ls -la "$shared_lib_dir/$lib"
  else
    echo "âœ— $lib is missing from $shared_lib_dir"
  fi
done

# Ensure the Ruby binary is accessible
if [ ! -f "$bootstrap_ruby_dir/bin/ruby" ]; then
  echo "ERROR: Ruby binary not found at $bootstrap_ruby_dir/bin/ruby"
  echo "Contents of directory:"
  find "$bootstrap_ruby_dir" -type f -name "ruby" | sort
  exit 1
fi

if [ ! -x "$bootstrap_ruby_dir/bin/ruby" ]; then
  echo "Ruby binary found but not executable. Setting permissions..."
  chmod +x "$bootstrap_ruby_dir/bin/ruby"
fi

echo "Verifying Ruby environment:"
echo "------------------------"
echo "Ruby binary location: $bootstrap_ruby_dir/bin/ruby"
echo "Library path: $LD_LIBRARY_PATH"
echo "GEM_HOME: $GEM_HOME"
echo "RUBYLIB: $RUBYLIB"
echo "PATH: $PATH"
echo "Testing Ruby binary:"
"$bootstrap_ruby_dir/bin/ruby" -v
echo "Checking Ruby installation structure:"
find "$bootstrap_ruby_dir/lib/ruby" -type d | sort
echo "------------------------"

if detect_needs_java "$BUILD_DIR"; then
  cat <<EOM

       ## Warning: Your app needs java

       The Ruby buildpack determined your app needs java installed
       we recommend you add the jvm buildpack to your application:

         $ heroku buildpacks:add heroku/jvm --index=1

-----> Installing Java

EOM

  compile_buildpack_v2 "$BUILD_DIR" "$CACHE_DIR" "$ENV_DIR" "https://buildpack-registry.s3.us-east-1.amazonaws.com/buildpacks/heroku/jvm.tgz" "heroku/jvm"
fi

echo "Running ruby_compile with Ruby from: $bootstrap_ruby_dir/bin/ruby"

# Verify Ruby binary exists and is executable right before execution
if [ ! -f "$bootstrap_ruby_dir/bin/ruby" ]; then
  echo "ERROR: Ruby binary not found at $bootstrap_ruby_dir/bin/ruby before execution"
  exit 1
fi

# Verify environment before executing Ruby
echo "Verifying Ruby environment:"
echo "------------------------"
echo "Ruby binary location: $bootstrap_ruby_dir/bin/ruby"
echo "Library path: $bootstrap_ruby_dir/lib/shared:$bootstrap_ruby_dir/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
echo "GEM_HOME: $bootstrap_ruby_dir/lib/ruby/gems/2.6.0"

# Set RUBYLIB to include all possible locations where rubygems.rb might be found
export RUBYLIB="$bootstrap_ruby_dir/lib:$bootstrap_ruby_dir/lib/ruby:$bootstrap_ruby_dir/lib/ruby/2.6.0:$bootstrap_ruby_dir/lib/ruby/2.6.0/x86_64-linux:$bootstrap_ruby_dir/lib/ruby/site_ruby/2.6.0:$bootstrap_ruby_dir/lib/ruby/vendor_ruby/2.6.0"
echo "RUBYLIB: $RUBYLIB"
echo "PATH: $PATH"

# Test the Ruby binary to ensure it works
echo "Testing Ruby binary:"
if LD_LIBRARY_PATH="$bootstrap_ruby_dir/lib/shared:$bootstrap_ruby_dir/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}" "$bootstrap_ruby_dir/bin/ruby" -v; then
  echo "Ruby binary test successful"
else
  echo "ERROR: Ruby binary test failed"
  exit 1
 fi

# Check if rubygems.rb exists in any of the directories
echo "Checking for rubygems.rb:"
rubygems_found=false
rubygems_path=""

find "$bootstrap_ruby_dir/lib" -name "rubygems.rb" | while read -r file; do
  echo "Found rubygems.rb at: $file"
  rubygems_found=true
  rubygems_path="$file"
done

# Special handling for the case where rubygems.rb is in the lib directory
if [ -f "$bootstrap_ruby_dir/lib/rubygems.rb" ]; then
  echo "Found rubygems.rb at the top level lib directory"
  rubygems_found=true
  rubygems_path="$bootstrap_ruby_dir/lib/rubygems.rb"
fi

# If rubygems.rb is found somewhere but not in the standard location, create symlinks
if [ "$rubygems_found" = "true" ] && [ ! -f "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb" ]; then
  echo "Creating symlinks to existing rubygems.rb"
  mkdir -p "$bootstrap_ruby_dir/lib/ruby/2.6.0"
  ln -sf "$rubygems_path" "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb"
  echo "Created symlink at $bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb"
  
  # Also create symlinks in other Ruby load paths
  for dir in "$bootstrap_ruby_dir/lib/ruby/site_ruby/2.6.0" "$bootstrap_ruby_dir/lib/ruby/vendor_ruby/2.6.0"; do
    mkdir -p "$dir"
    ln -sf "$rubygems_path" "$dir/rubygems.rb"
    echo "Created symlink at $dir/rubygems.rb"
  done
# If rubygems.rb is not found anywhere, create a minimal one
elif [ ! -f "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb" ]; then
  echo "rubygems.rb not found, creating a minimal one"
  mkdir -p "$bootstrap_ruby_dir/lib/ruby/2.6.0"
  cat > "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb" << 'EOF'
# Minimal RubyGems implementation
module Gem
  VERSION = "3.0.3"
  
  class LoadError < ::LoadError
  end
  
  def self.path
    @gem_path ||= [ENV['GEM_HOME']].compact
  end
  
  def self.paths
    @gem_paths ||= {}
    @gem_paths[:path] ||= path
    @gem_paths
  end
  
  def self.ruby
    @ruby ||= File.join(RbConfig::CONFIG['bindir'],
                        RbConfig::CONFIG['ruby_install_name'])
    @ruby << RbConfig::CONFIG['EXEEXT']
  end
end
EOF
  echo "Created minimal rubygems.rb at $bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb"
  
  # Create symlinks to ensure it's found in all possible locations
  for dir in "$bootstrap_ruby_dir/lib/ruby/site_ruby/2.6.0" "$bootstrap_ruby_dir/lib/ruby/vendor_ruby/2.6.0"; do
    mkdir -p "$dir"
    ln -sf "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb" "$dir/rubygems.rb"
    echo "Created symlink at $dir/rubygems.rb"
  done
fi

# Also create a symlink at the top level lib directory if it doesn't exist
if [ ! -f "$bootstrap_ruby_dir/lib/rubygems.rb" ]; then
  if [ -f "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb" ]; then
    ln -sf "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb" "$bootstrap_ruby_dir/lib/rubygems.rb"
    echo "Created symlink at $bootstrap_ruby_dir/lib/rubygems.rb"
  fi
fi

# Create a direct symlink for rubygems.rb in the root directory where Ruby is looking for it
echo "Creating direct symlink for rubygems.rb in the root directory"
if [ -f "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb" ]; then
  # Create a symlink in the root directory
  ln -sf "$bootstrap_ruby_dir/lib/ruby/2.6.0/rubygems.rb" "$bootstrap_ruby_dir/rubygems.rb"
  echo "Created symlink at $bootstrap_ruby_dir/rubygems.rb"
elif [ -f "$bootstrap_ruby_dir/lib/ruby/site_ruby/2.6.0/rubygems.rb" ]; then
  # Try site_ruby location
  ln -sf "$bootstrap_ruby_dir/lib/ruby/site_ruby/2.6.0/rubygems.rb" "$bootstrap_ruby_dir/rubygems.rb"
  echo "Created symlink at $bootstrap_ruby_dir/rubygems.rb"
else
  # Create a minimal rubygems.rb file directly in the root directory
  echo "Creating minimal rubygems.rb directly in the root directory"
  cat > "$bootstrap_ruby_dir/rubygems.rb" << 'EOF'
# Minimal RubyGems implementation
module Gem
  VERSION = "3.0.3"
  
  class LoadError < ::LoadError
  end
  
  def self.path
    @gem_path ||= [ENV['GEM_HOME']].compact
  end
  
  def self.paths
    @gem_paths ||= {}
    @gem_paths[:path] ||= path
    @gem_paths
  end
  
  def self.ruby
    @ruby ||= File.join(RbConfig::CONFIG['bindir'],
                        RbConfig::CONFIG['ruby_install_name'])
    @ruby << RbConfig::CONFIG['EXEEXT']
  end
end
EOF
  echo "Created minimal rubygems.rb at $bootstrap_ruby_dir/rubygems.rb"
fi

# Modify the Ruby command to include the root directory in RUBYLIB
echo "Executing Ruby with modified RUBYLIB to include root directory"
LD_LIBRARY_PATH="$bootstrap_ruby_dir/lib/shared:$bootstrap_ruby_dir/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}" \
  PATH="$bootstrap_ruby_dir/bin:$PATH" \
  GEM_HOME="$bootstrap_ruby_dir/lib/ruby/gems/2.6.0" \
  RUBYLIB="$bootstrap_ruby_dir:$bootstrap_ruby_dir/lib:$bootstrap_ruby_dir/lib/ruby:$bootstrap_ruby_dir/lib/ruby/2.6.0:$bootstrap_ruby_dir/lib/ruby/2.6.0/x86_64-linux:$bootstrap_ruby_dir/lib/ruby/site_ruby/2.6.0:$bootstrap_ruby_dir/lib/ruby/vendor_ruby/2.6.0" \
  "$bootstrap_ruby_dir/bin/ruby" "$BIN_DIR/support/ruby_compile" "$@"
