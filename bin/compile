#!/usr/bin/env bash
# The actual compilation code lives in `bin/support/ruby_compile`. This file instead
# bootstraps the ruby needed and then executes `bin/support/ruby_compile`

set -e  # Exit immediately if a command exits with a non-zero status
set -o pipefail  # Return value of a pipeline is the value of the last command to exit with a non-zero status

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BIN_DIR=$(cd "$(dirname "$0")" || exit; pwd) # absolute path
BUILDPACK_DIR=$(dirname "$BIN_DIR")

# shellcheck source=bin/support/bash_functions.sh
source "$BIN_DIR/support/bash_functions.sh"

# Download OpenSSL 1.0.x for compatibility with precompiled Ruby
echo "-----> Setting up OpenSSL for Ruby"
OPENSSL_DIR=$($BIN_DIR/support/download_openssl "$BUILD_DIR" "$CACHE_DIR")
echo "[DEBUG] OpenSSL installed at: $OPENSSL_DIR"

# Use only the precompiled Ruby from rubies directory
RUBIES_DIR="$BUILDPACK_DIR/rubies"
RUBY_VERSION="2.6.6"
RUBY_PATH="$RUBIES_DIR/ruby-$RUBY_VERSION"
RUBY_BIN="$RUBY_PATH/bin/ruby"

echo "-----> Setting up Ruby environment from $RUBIES_DIR"

# Check if Ruby exists in the rubies directory
if [ ! -f "$RUBY_BIN" ]; then
  echo "[ERROR] Precompiled Ruby not found at $RUBY_BIN"
  echo "[ERROR] Make sure the rubies directory contains a properly compiled Ruby $RUBY_VERSION"
  exit 1
fi

# Check if Ruby is executable
if [ ! -x "$RUBY_BIN" ]; then
  echo "[ERROR] Ruby binary at $RUBY_BIN is not executable"
  chmod +x "$RUBY_BIN"
  echo "[DEBUG] Made Ruby binary executable"
fi

# Set up environment variables for Ruby
echo "[DEBUG] Using precompiled Ruby from: $RUBY_BIN"
RUBY_LIB_DIR="$RUBY_PATH/lib/ruby"

# Add Ruby to PATH
export PATH="$RUBY_PATH/bin:$PATH"

# Set up OpenSSL environment
echo "[DEBUG] Setting up OpenSSL environment for Ruby"

# Set LD_LIBRARY_PATH to include both Ruby and OpenSSL libraries
export LD_LIBRARY_PATH="$RUBY_PATH/lib:$OPENSSL_DIR/lib:${LD_LIBRARY_PATH:-}"

# Set RUBYLIB for Ruby libraries
export RUBYLIB="$RUBY_LIB_DIR/2.6.0:$RUBY_LIB_DIR/2.6.0/x86_64-linux:$RUBY_LIB_DIR/site_ruby/2.6.0:$RUBY_LIB_DIR/vendor_ruby/2.6.0:${RUBYLIB:-}"

# Create symlinks to OpenSSL libraries in Ruby's lib directory
echo "[DEBUG] Creating symlinks to OpenSSL libraries"
ln -sf "$OPENSSL_DIR/lib/libcrypto.so.1.0.0" "$RUBY_PATH/lib/libcrypto.so.1.0.0"
ln -sf "$OPENSSL_DIR/lib/libssl.so.1.0.0" "$RUBY_PATH/lib/libssl.so.1.0.0"

# Unset GEM_PATH to avoid conflicts
unset GEM_PATH

# Print debug information
echo "[DEBUG] Ruby binary: $RUBY_BIN"
echo "[DEBUG] PATH: $PATH"
echo "[DEBUG] LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
echo "[DEBUG] RUBYLIB: $RUBYLIB"
echo "[DEBUG] OpenSSL directory: $OPENSSL_DIR"
echo "[DEBUG] Which ruby: $(which ruby 2>/dev/null || echo 'ruby not in PATH')"

# Test Ruby
if "$RUBY_BIN" --version > /dev/null 2>&1; then
  echo "[DEBUG] Ruby version: $($RUBY_BIN --version)"
else
  echo "[ERROR] Ruby binary exists but cannot be executed properly"
  echo "[DEBUG] Ruby binary details: $(file "$RUBY_BIN")"
  echo "[DEBUG] Ruby binary permissions: $(ls -la "$RUBY_BIN")"
  exit 1
fi

# Try to load OpenSSL and print diagnostic information
echo "[DEBUG] Attempting to load OpenSSL with Ruby..."
"$RUBY_BIN" -e 'begin; require "openssl"; puts "OpenSSL loaded successfully: #{OpenSSL::OPENSSL_VERSION}"; rescue LoadError => e; puts "Failed to load OpenSSL: #{e.message}"; end'

# Create .profile.d script to set up environment for the app
echo "-----> Creating .profile.d script for Ruby environment"
mkdir -p "$BUILD_DIR/.profile.d"
cat > "$BUILD_DIR/.profile.d/ruby.sh" << EOF
export PATH="$RUBY_PATH/bin:\$PATH"
export LD_LIBRARY_PATH="$RUBY_PATH/lib:$OPENSSL_DIR/lib:\${LD_LIBRARY_PATH:-}"
export RUBYLIB="$RUBY_LIB_DIR/2.6.0:$RUBY_LIB_DIR/2.6.0/x86_64-linux:$RUBY_LIB_DIR/site_ruby/2.6.0:$RUBY_LIB_DIR/vendor_ruby/2.6.0:\${RUBYLIB:-}"
EOF
chmod +x "$BUILD_DIR/.profile.d/ruby.sh"

# Check if we need Java
if detect_needs_java "$BUILD_DIR"; then
  cat <<EOM

       ## Warning: Your app needs java

       The Ruby buildpack determined your app needs java installed
       we recommend you add the jvm buildpack to your application:

         $ heroku buildpacks:add heroku/jvm --index=1

-----> Installing Java

EOM

  compile_buildpack_v2 "$BUILD_DIR" "$CACHE_DIR" "$ENV_DIR" "https://buildpack-registry.s3.us-east-1.amazonaws.com/buildpacks/heroku/jvm.tgz" "heroku/jvm"
fi

# Run the Ruby compile script
echo "[DEBUG] Running Ruby compile script with Ruby: $RUBY_BIN"
"$RUBY_BIN" "$BIN_DIR/support/ruby_compile" "$@"
