require 'language_pack/base'
require 'language_pack/shell_helpers'

module LanguagePack::Installers; end

class LanguagePack::Installers::HerokuRubyInstaller
  BASE_URL = LanguagePack::Base::VENDOR_URL
  BIN_DIR = Pathname("bin")

  include LanguagePack::ShellHelpers
  attr_reader :fetcher

  def initialize(stack: , multi_arch_stacks: , arch: , report: HerokuBuildReport::GLOBAL)
    @report = report
    # Always use heroku-20 stack for Ruby downloads
    @fetcher = LanguagePack::Fetcher.new(BASE_URL, stack: "heroku-20")
  end

  def install(ruby_version, install_dir, openssl_dir = nil)
    @report.capture(
      "ruby.version" => ruby_version.ruby_version,
      "ruby.engine" => ruby_version.engine,
      "ruby.engine.version" => ruby_version.engine_version,
      "ruby.major" => ruby_version.major,
      "ruby.minor" => ruby_version.minor,
      "ruby.patch" => ruby_version.patch,
      "ruby.default" => ruby_version.default?,
      "openssl.dir" => openssl_dir
    )
    fetch_unpack(ruby_version, install_dir)
    configure_ruby_with_openssl(install_dir, openssl_dir) if openssl_dir
    setup_binstubs(install_dir)
  end

  def fetch_unpack(ruby_version, install_dir)
    FileUtils.mkdir_p(install_dir)
    Dir.chdir(install_dir) do
      @fetcher.fetch_untar("#{ruby_version.version_for_download}.tgz")
    end
  end

  private def configure_ruby_with_openssl(install_dir, openssl_dir)
    topic "Configuring Ruby to use OpenSSL from #{openssl_dir}"
    
    # Create a wrapper script for Ruby that sets SSL_CERT_FILE and other OpenSSL environment variables
    wrapper_path = "#{install_dir}/bin/ruby_with_openssl"
    File.open(wrapper_path, 'w') do |f|
      f.puts "#!/bin/bash"
      f.puts "export OPENSSL_DIR=\"#{openssl_dir}\""
      f.puts "export SSL_CERT_FILE=\"#{openssl_dir}/ssl/cert.pem\""
      f.puts "export LD_LIBRARY_PATH=\"#{openssl_dir}/lib:$LD_LIBRARY_PATH\""
      f.puts "export LIBRARY_PATH=\"#{openssl_dir}/lib:$LIBRARY_PATH\""
      f.puts "export CPATH=\"#{openssl_dir}/include:$CPATH\""
      f.puts "\"#{install_dir}/bin/ruby\" \"$@\""
    end
    
    # Make the wrapper executable
    run("chmod +x #{wrapper_path}")
    
    # Create a symlink to use the wrapper by default
    run("ln -sf ruby_with_openssl #{install_dir}/bin/ruby.openssl")
    
    # Create a .profile.d script to set environment variables for all processes
    profile_dir = "#{install_dir}/../.profile.d"
    FileUtils.mkdir_p(profile_dir)
    File.open("#{profile_dir}/ruby_openssl.sh", 'w') do |f|
      f.puts "export OPENSSL_DIR=\"#{openssl_dir}\""
      f.puts "export SSL_CERT_FILE=\"#{openssl_dir}/ssl/cert.pem\""
      f.puts "export LD_LIBRARY_PATH=\"#{openssl_dir}/lib:$LD_LIBRARY_PATH\""
      f.puts "export LIBRARY_PATH=\"#{openssl_dir}/lib:$LIBRARY_PATH\""
      f.puts "export CPATH=\"#{openssl_dir}/include:$CPATH\""
    end
  end
  
  private def setup_binstubs(install_dir)
    BIN_DIR.mkpath
    run("ln -s ruby #{install_dir}/bin/ruby.exe")

    install_pathname = Pathname.new(install_dir)
    Dir["#{install_dir}/bin/*"].each do |vendor_bin|
      # for Ruby 2.6.0+ don't symlink the Bundler bin so our shim works
      next if vendor_bin.include?("bundle")

      # The bin/rake binstub generated when compiling ruby does not load bundler
      # which can cause unexpected failures. Deleting this binstub allows two things:
      #
      #   - If the app includes a custom binstub allows it to be used
      #   - If the app does not include a custom binstub, then it will fall back to vendor/bundle/bin/rake
      #     which is generated by bundler
      #
      # Discussion: https://github.com/heroku/heroku-buildpack-ruby/issues/1025#issuecomment-653102430
      next if vendor_bin.include?("rake")

      if install_pathname.absolute?
        run("ln -s #{vendor_bin} #{BIN_DIR}")
      else
        run("ln -s ../#{vendor_bin} #{BIN_DIR}")
      end
    end
  end
end
